cmake_minimum_required(VERSION 3.3)	

project(Alone)
# Project name

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wcpp -g -Wall")

include_directories(include)

set(SOURCE_EXUTABLE             src/main.c)
set(SOURCE_GAME_MANAGER         src/GameManager.c)
set(SOURCE_LOGGER               src/logger/Logger.c)
set(SOURCE_RENDERER             src/renderer/Renderer.c)
set(SOURCE_MUSICAN              src/musican/Musican.c)
set(SOURCE_RES_MANAGER          src/resourceManager/ResourceManager.c)
set(SOURCE_EVENT_MANAGER        src/eventManager/EventManager.c)
set(SOURCE_TEXTURE_RES          src/resourceManager/TextureResource.c)
set(SOURCE_TEXT_RES             src/resourceManager/TextResource.c)
set(SOURCE_SOUND_RES            src/resourceManager/SoundResource.c)
set(SOURCE_SCRIPT_RES           src/resourceManager/ScriptResource.c)
set(SOURCE_SCENENODE            src/scene/SceneNode.c)
set(SOURCE_ITEM                 src/item/Item.c)
set(SOURCE_LEVEL                src/level/Level.c)
set(SOURCE_MICROMODULE          src/module/MicroModule.c)
set(SOURCE_NANOMODULE           src/module/NanoModule.c)
set(SOURCE_SCENE                src/scene/Scene.c)
set(SOURCE_SETTINGS             src/settings/Settings.c)
set(SOURCE_TEXT                 src/text/Text.c)
set(SOURCE_SPRITE              src/sprite/Sprite.c)
set(SOURCE_USER                 src/user/User.c)
set(SOURCE_GAMEEVENT            src/eventManager/GameEvent.c)
set(SOURCE_BUTTON               src/gui/Button.c)
set(SOURCE_CHECKBOX             src/gui/CheckBox.c)
set(SOURCE_CONTEXTMENU          src/gui/ContextMenu.c)
set(SOURCE_LISTBOX              src/gui/ListBox.c)
set(SOURCE_SLIDER               src/gui/Slider.c)
set(SOURCE_TEXTBOX              src/gui/TextBox.c)
set(SOURCE_PROGRESSBAR          src/gui/ProgressBar.c)
set(SOURCE_MACROSECTION         src/module/section/MacroSection.c)
set(SOURCE_MICROSECTION         src/module/section/MicroSection.c)
set(SOURCE_NANOSECTION          src/module/section/NanoSection.c)
set(SOURCE_BACKGROUNDMODULE     src/module/macro/BackgroundModule.c)
set(SOURCE_ACTIVEMODULE         src/module/macro/ActiveModule.c)
set(SOURCE_TEXTPARSER           src/textParser/TextParser.c)

add_library(gameManager             STATIC ${SOURCE_GAME_MANAGER})
add_library(logger                  STATIC ${SOURCE_LOGGER})
add_library(renderer                STATIC ${SOURCE_RENDERER})
add_library(musican                 STATIC ${SOURCE_MUSICAN})
add_library(resourceManager         STATIC ${SOURCE_RES_MANAGER})
add_library(eventManager            STATIC ${SOURCE_EVENT_MANAGER})
add_library(textureRes              STATIC ${SOURCE_TEXTURE_RES})
add_library(textRes                 STATIC ${SOURCE_TEXT_RES})
add_library(soundRes                STATIC ${SOURCE_SOUND_RES})
add_library(scriptRes               STATIC ${SOURCE_SCRIPT_RES})
add_library(sceneNode               STATIC ${SOURCE_SCENENODE})
add_library(item                    STATIC ${SOURCE_ITEM})
add_library(level                   STATIC ${SOURCE_LEVEL})
add_library(microModule             STATIC ${SOURCE_MICROMODULE})
add_library(nanoModule              STATIC ${SOURCE_NANOMODULE})
add_library(scene                   STATIC ${SOURCE_SCENE})
add_library(settings                STATIC ${SOURCE_SETTINGS})
add_library(text                    STATIC ${SOURCE_TEXT})
add_library(sprite                  STATIC ${SOURCE_SPRITE})
add_library(user                    STATIC ${SOURCE_USER})
add_library(gameEvent               STATIC ${SOURCE_GAMEEVENT})
add_library(button                  STATIC ${SOURCE_BUTTON})
add_library(checkBox                STATIC ${SOURCE_CHECKBOX})
add_library(contextMenu             STATIC ${SOURCE_CONTEXTMENU})
add_library(listBox                 STATIC ${SOURCE_LISTBOX})
add_library(slider                  STATIC ${SOURCE_SLIDER})
add_library(textBox                 STATIC ${SOURCE_TEXTBOX})
add_library(progressBar             STATIC ${SOURCE_PROGRESSBAR})
add_library(macroSection            STATIC ${SOURCE_MACROSECTION})
add_library(microSection            STATIC ${SOURCE_MICROSECTION})
add_library(nanoSection             STATIC ${SOURCE_NANOSECTION})
add_library(backgroundModule        STATIC ${SOURCE_BACKGROUNDMODULE})
add_library(activeModule            STATIC ${SOURCE_ACTIVEMODULE})
add_library(textParser              STATIC ${SOURCE_TEXTPARSER})

add_executable(Alone ${SOURCE_EXUTABLE})

target_link_libraries(Alone gameManager)
target_link_libraries(gameManager logger)
target_link_libraries(Alone renderer)
target_link_libraries(Alone musican)
target_link_libraries(Alone resourceManager)
target_link_libraries(Alone eventManager)
target_link_libraries(Alone sceneNode)
target_link_libraries(Alone microModule)
target_link_libraries(Alone nanoModule)
target_link_libraries(Alone scene)
target_link_libraries(Alone settings)
target_link_libraries(scene item)
target_link_libraries(scene level)
target_link_libraries(scene text)
target_link_libraries(scene sprite)
target_link_libraries(scene user)
target_link_libraries(scene button)
target_link_libraries(scene checkBox)
target_link_libraries(scene contextMenu)
target_link_libraries(scene listBox)
target_link_libraries(scene slider)
target_link_libraries(scene textBox)
target_link_libraries(scene progressBar)
target_link_libraries(Alone gameEvent)
target_link_libraries(Alone backgroundModule)
target_link_libraries(Alone activeModule)
target_link_libraries(Alone macroSection)
target_link_libraries(Alone microSection)
target_link_libraries(Alone nanoSection)
target_link_libraries(Alone textureRes)
target_link_libraries(Alone textRes)
target_link_libraries(Alone soundRes)
target_link_libraries(Alone scriptRes)
target_link_libraries(Alone textParser)

include(FindPkgConfig)

FIND_PACKAGE(Lua 5.3 REQUIRED)
if(LUA_FOUND)
    include_directories(${LUA_INCLUDE_DIR})
    target_link_libraries(scriptRes ${LUA_LIBRARIES})
endif()

PKG_SEARCH_MODULE(SDL2 REQUIRED sdl2)
if(SDL2_FOUND)
    include_directories(${SDL2_INCLUDE_DIR})
    target_link_libraries(Alone ${SDL2_LIBRARIES})
endif()

PKG_SEARCH_MODULE(SDL2IMAGE REQUIRED SDL2_image>=2.0.0)
if(SDL2IMAGE_FOUND)
    include_directories(${SDL2IMAGE_INCLUDE_DIR})
    target_link_libraries(Alone ${SDL2IMAGE_LIBRARIES})
endif()

PKG_SEARCH_MODULE(SDL2MIXER REQUIRED SDL2_mixer>=2.0.0)
if(SDL2MIXER_FOUND)
    include_directories(${SDL2MIXER_INCLUDE_DIR})
    target_link_libraries(Alone ${SDL2MIXER_LIBRARIES})
endif()